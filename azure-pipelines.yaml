name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  - main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. - Done
# Otherwise, comment out the line below.
pool: Pool

variables:
  python.version: "3.8"
  # ToDo: Replace the service connection name as used in the DevOps project settings - Done
  azureServiceConnectionId: "MyConnection"
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: "Dev"
  #Project Name
  app.name: "hungnd-v2"
  system.log: true
stages:
  #--------------------------------------------#
  # BUILD STAGE
  #--------------------------------------------#
  - stage: Build
    jobs:
      - job: BuildInfrastructure
        steps:
          #--------------------------------------------#
          # Use Terraform to create the Infrastructure
          # Install Terraform on the pipeline agent
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: "Terraform installation"
            inputs:
              terraformVersion: "1.2.9"

          # Run Terraform Init on the pipeline agent
          # ToDo: Replace the resource group name, storage account name, and container name below
          - task: TerraformTaskV3@3
            displayName: "Terraform init"
            inputs:
              provider: "azurerm"
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              backendServiceArm: "$(azureServiceConnectionId)"
              backendAzureRmResourceGroupName: "Azuredevops"
              backendAzureRmStorageAccountName: "hungndsa"
              backendAzureRmContainerName: "terraform"
              backendAzureRmKey: "test.terraform.tfstate"

          - task: TerraformTaskV3@3
            displayName: Terraform validate
            inputs:
              provider: "azurerm"
              command: "validate"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"

          # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it.
          # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module.
          # Install public key and private key file to the pipeline agent, using the task below.
          # ToDo: Change the inputs value below
          # - task: InstallSSHKey@0
          #   inputs:
          #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
          #     sshPublicKey: 'PUBLIC_KEY'            # variable value
          #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file

          - task: DownloadSecureFile@1
            name: secure_file
            displayName: Download terraform.tfvars
            inputs:
              secureFile: 'terraform.tfvars'

          - task: Bash@3
            displayName: Copy terraform.tfvars
            inputs:
              targetType: 'inline'
              script: cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test

          - task: TerraformTaskV3@3
            displayName: Terraform Plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-lock=false'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
              environmentServiceNameAzureRM: "MyConnection"

          # Run Terraform Apply
          - task: TerraformTaskV3@3
            displayName: Terraform apply
            inputs:
              provider: "azurerm"
              command: "apply"
              commandOptions: '-lock=false'
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
              environmentServiceNameAzureRM: "$(azureServiceConnectionId)"

          #--------------------------------------------#
          # Selenium (UI) Test Suite - Archive the package
          # "ArchiveFiles@2" picks up the web package and archives it.
          - task: ArchiveFiles@2
            displayName: "Archive UI Tests"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/selenium"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip"
          # Selenium Test Suite - Publish the package
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip # Same as the archiveFile artifact above.
            displayName: "Upload Package Selenium"
            artifact: drop-uitests

          - task: UseDotNet@2
            inputs:
              packageType: 'sdk'
              version: '6.x'

          - task: DotNetCoreCLI@2
            inputs:
              command: 'build'
              projects: '$(System.DefaultWorkingDirectory)/src/FakeRESTApi.sln'

          - script: |
              mkdir -p $(System.DefaultWorkingDirectory)/output
            displayName: Create Output Folder

          - task: DotNetCoreCLI@2
            inputs:
              command: 'publish'
              publishWebProjects: true
              arguments: '--output $(System.DefaultWorkingDirectory)/output'

          #--------------------------------------------#
          # FakeRestAPI - Archive
          # ToDo: publish step
          - publish: $(System.DefaultWorkingDirectory)/output/FakeRESTApi.Web.zip
            displayName: "Upload Package WebApp"
            artifact: drop-fakerestapi

          #--------------------------------------------#
          # JMeter (Performance) Test Suite - Archive
          # ToDo: Complete the ArchiveFiles@2 task and publish step
          - task: ArchiveFiles@2
            displayName: "Archive PerformanceTestSuite"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip"
          # JMeter Test Suite - Publish
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
            displayName: "Upload Package"
            artifact: drop-perftests

          #--------------------------------------------#
          # Postman Testing (Performance) Test Suite - Archive
          # ToDo: Complete the ArchiveFiles@2 task and publish step
          - task: ArchiveFiles@2
            displayName: "Archive PostmanTestSuite"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postman-tests.zip"
          # JMeter Test Suite - Publish
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postman-tests.zip
            displayName: "Upload Package"
            artifact: drop-postman-tests

  #--------------------------------------------#
  # DEPLOYMENT STAGE
  #--------------------------------------------#
  - stage: Deploy
    jobs:
      #--------------------------------------------#
      # Deploy FakeRestAPI Web App
      # ToDo: Provide <environment name> you created in your DevOps project
      - deployment: FakeRestAPI
        pool: Pool
        environment:
          name: $(environmentName)
          tags: dev
          resourceType: virtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop-fakerestapi # ToDo: Change/provide a name - Done

                - task: AzureWebApp@1
                  displayName: "Deploy Azure Web App"
                  inputs:
                    azureSubscription: "$(azureServiceConnectionId)" # ToDo - Done
                    appName: "$(app.name)" # ToDo - Done
                    appType: webApp
                    package: $(Pipeline.Workspace)/drop-fakerestapi/FakeRESTApi.Web.zip # ToDo: Use the published zip artifact. - Done
                    deploymentMethod: 'auto'

                #--------------------------------------------#
                # Run JMeter test suite against the App Service

                - download: current
                  artifact: drop-perftests # ToDo: Change/provide a name - Done

                - script: |
                    sudo apt-get update
                    sudo apt-get install -y default-jre
                    sudo apt install -y zip
                  displayName: Install Java 11

                - task: CmdLine@2
                  inputs:
                    script: |
                      curl -O https://dlcdn.apache.org/jmeter/binaries/apache-jmeter-5.6.3.zip
                      unzip -o apache-jmeter-5.6.3.zip
                      unzip -o $(Build.BuildId)-perftests.zip
                      mkdir -p log/endurance-test-html-report
                      mkdir -p log/stress-test-html-report
                      ./apache-jmeter-5.6.3/bin/jmeter.sh -n -t ./test-suite/Endurance_Test.jmx -j jmeter-endurance.log -l log/endurance-test-result.csv -e -f -o log/endurance-test-html-report
                      ./apache-jmeter-5.6.3/bin/jmeter.sh -n -t ./test-suite/Stress_Test.jmx -j jmeter-stress.log -l log/stress-test-result.csv -e -f -o log/stress-test-html-report
                      cat jmeter-endurance.log
                      cat jmeter-stress.log
                      # ToDo: Write your commands
                    workingDirectory: $(Pipeline.Workspace)/drop-perftests # ToDo: Use the artifact name from the task above - Done

                - task: ArchiveFiles@2
                  displayName: "Archive JMeter Test Result"
                  inputs:
                    rootFolderOrFile: $(Pipeline.Workspace)/drop-perftests/log
                    includeRootFolder: false
                    archiveType: "zip"
                    archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-results.zip"

                # JMeter Test Suite - Publish Test Result
                - publish: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-results.zip"
                  displayName: "Upload Package"
                  artifact: drop-jmeter-results

                - download: current
                  artifact: drop-postman-tests # ToDo: Change/provide a name - Done

                - task: NodeTool@0
                  inputs:
                    versionSource: 'spec'
                    versionSpec: '18.x'

                #--------------------------------------------#
                # Postman - Install Newman
                # ToDo: Update the command and verify the working directory - Done
                - task: CmdLine@2
                  displayName: Install Newman
                  inputs:
                    script: |
                      export $PATH
                      which npm
                      npm --version
                      node --version
                      npm install -g newman
                    workingDirectory: $(Pipeline.Workspace)/drop-postman-tests

                - task: CmdLine@2
                  displayName: "Unzip Postman Test"
                  inputs:
                    script: |
                      unzip -o $(Build.BuildId)-postman-tests.zip
                    workingDirectory: $(Pipeline.Workspace)/drop-postman-tests

                # Postman Data Validation Test Suite
                # ToDo: Verify the working directory - Done
                - task: CmdLine@2
                  displayName: Run Data Validation Tests
                  continueOnError: true
                  inputs:
                    script: "newman run Validation_Test.postman_collection.json -e Test.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml"
                    workingDirectory: $(Pipeline.Workspace)/drop-postman-tests

                # Postman Regression Test Suite
                # ToDo: Verify the working directory - Done
                - task: CmdLine@2
                  displayName: Run Regression Tests
                  continueOnError: true
                  inputs:
                    script: "newman run Regression_Test.postman_collection.json -e Test.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml"
                    workingDirectory: $(Pipeline.Workspace)/drop-postman-tests

                # Postman - Publish Results
                # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
                - task: PublishTestResults@2
                  inputs:
                    testResultsFormat: "JUnit"
                    testResultsFiles: "**/TEST-*.xml"
                    searchFolder: $(Pipeline.Workspace)/drop-postman-tests # ToDo - Done
                    mergeTestResults: true
                    testRunTitle: "Testing with Postman" # ToDo - Done
      #--------------------------------------------#
      # Selenium | Functional UI Tests
      # ToDo:
      - deployment: VMDeploy
        displayName: Selenium Tests
        environment:
          name: $(environmentName)
          tags: dev
          resourceType: virtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop-uitests # ToDo: Change/provide a name - Done

                - task: Bash@3
                  inputs:
                    targetType: "inline"
                    script: |
                      #! /bin/bash
                      sudp apt update
                      sudo apt-get upgrade -y 
                      sudo apt-get install python3-pip -y 
                      sudo apt-get install unzip -y 
                      sudo apt-get install -y chromium-browser 
                      pip3 install selenium 
                      cd ~/ 
                      DIR=~/app 
                      if [ ! -d "$DIR" ]; 
                      then 
                          mkdir app 
                      fi 
                      cd app 
                      FILE=~/app/chromedriver_linux64.zip 
                      if [ ! -f "$FILE" ]; 
                      then 
                          LATEST=$(chromium-browser --product-version)
                          wget https://storage.googleapis.com/chrome-for-testing-public/$LATEST/linux64/chromedriver-linux64.zip 
                          unzip -o chromedriver_linux64.zip 
                          sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver 
                      fi
                      cp ~/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip .
                      unzip -o $(Build.BuildId)-uitests.zip
                      export PATH=$PATH:~/app
                      echo "Starting Selenium Tests"
                      python3 login.py
                      echo "Completed Selenium Tests. Check selenium.log for results."
