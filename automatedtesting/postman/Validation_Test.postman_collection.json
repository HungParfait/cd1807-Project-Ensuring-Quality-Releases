{
	"info": {
		"_postman_id": "23b270c4-4f88-4ff9-82bd-0a82523de244",
		"name": "Validation_Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17006080"
	},
	"item": [
		{
			"name": "Get All Activities",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"var expectedActivities = 30;",
							"",
							"pm.test(\"Found activities with ids 1 - \" + expectedActivities, function () {",
							"    for (i = 0; i < expectedActivities; i++) {",
							"        pm.expect(jsonData[i].id).to.eql(i+1);",
							"    }",
							"});",
							"",
							"pm.test(\"Total activities found: \" + expectedActivities, function () {",
							"    pm.expect(jsonData.length).to.eql(expectedActivities);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/Activities",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Authors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"// Since this is fake API I observed the getAllAuthors returns unpredictable values, sometimes 400, sometimes 600 or also 800.",
							"// Hence it makes no sense to test total number of authors.",
							"//var expectedAuthors = 600;",
							"//pm.test(\"Total authors found: \" + expectedAuthors, function () {",
							"//    pm.expect(jsonData.length).to.eql(expectedAuthors);",
							"//});",
							"",
							"var minimumAuthors = 400;",
							"pm.test(\"Found authors with ids 1 - \" + minimumAuthors, function () {",
							"    for (i = 0; i < minimumAuthors; i++) {",
							"        pm.expect(jsonData[i].id).to.eql(i+1);",
							"    }",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/Authors",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"var expectedBooks = 200;",
							"",
							"pm.test(\"Found books with ids 1 - \" + expectedBooks, function () {",
							"    for (i = 0; i < expectedBooks; i++) {",
							"        pm.expect(jsonData[i].id).to.eql(i+1);",
							"    }",
							"});",
							"",
							"pm.test(\"Total books found: \" + expectedBooks, function () {",
							"    pm.expect(jsonData.length).to.eql(expectedBooks);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/Books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All CoverPhotos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"var expectedCoverPhotos = 200;",
							"",
							"pm.test(\"Found cover photos with ids 1 - \" + expectedCoverPhotos, function () {",
							"    for (i = 0; i < expectedCoverPhotos; i++) {",
							"        pm.expect(jsonData[i].id).to.eql(i+1);",
							"    }",
							"});",
							"",
							"pm.test(\"Total cover photos found: \" + expectedCoverPhotos, function () {",
							"    pm.expect(jsonData.length).to.eql(expectedCoverPhotos);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/CoverPhotos",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"CoverPhotos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"var expectedUsers = 10;",
							"",
							"pm.test(\"Found users with ids 1 - \" + expectedUsers, function () {",
							"    for (i = 0; i < expectedUsers; i++) {",
							"        pm.expect(jsonData[i].id).to.eql(i+1);",
							"    }",
							"});",
							"",
							"pm.test(\"Total users found: \" + expectedUsers, function () {",
							"    pm.expect(jsonData.length).to.eql(expectedUsers);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/Users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Create successfully\", function () {",
							"    pm.expect(jsonData.id).not.to.eql(null);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"title\": \"string\",\r\n  \"dueDate\": \"2024-08-22T20:04:01.622Z\",\r\n  \"completed\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/Activities",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Activities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Create successfully\", function () {",
							"    pm.expect(jsonData.id).not.to.eql(null);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"idBook\": 0,\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/Authors",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Create successfully\", function () {",
							"    pm.expect(jsonData.id).not.to.eql(null);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"title\": \"string\",\r\n  \"description\": \"string\",\r\n  \"pageCount\": 0,\r\n  \"excerpt\": \"string\",\r\n  \"publishDate\": \"2024-08-22T20:07:44.471Z\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/Books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create CoverPhoto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Create successfully\", function () {",
							"    pm.expect(jsonData.id).not.to.eql(null);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"idBook\": 0,\r\n  \"url\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/CoverPhotos",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"CoverPhotos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Create successfully\", function () {",
							"    pm.expect(jsonData.id).not.to.eql(null);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"userName\": \"string\",\r\n  \"password\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/Users?user=user111",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Users"
					],
					"query": [
						{
							"key": "user",
							"value": "user111"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Activity with id 1 as expected\", function () {",
							"    pm.expect(jsonData.id).to.eql(1);",
							"    pm.expect(jsonData.title).to.eql(\"Activity 1\");",
							"    pm.expect(jsonData.completed).to.eql(false);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/Activities/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Activities",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Author with id 1 as expected\", function () {",
							"    pm.expect(jsonData.id).to.eql(1);",
							"    pm.expect(jsonData.idBook).to.eql(1);",
							"    pm.expect(jsonData.firstName).to.eql(\"First Name 1\");",
							"    pm.expect(jsonData.lastName).to.eql(\"Last Name 1\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/Authors/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Authors",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Book with id 1 as expected\", function () {",
							"    pm.expect(jsonData.id).to.eql(1);",
							"    pm.expect(jsonData.title).to.eql(\"Book 1\");",
							"    pm.expect(jsonData.pageCount).to.eql(100);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/Books/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Books",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get CoverPhoto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Cover Photo with id 1 as expected\", function () {",
							"    pm.expect(jsonData.id).to.eql(1);",
							"    pm.expect(jsonData.idBook).to.eql(1);",
							"    pm.expect(jsonData.url).to.eql(\"https://placeholdit.imgix.net/~text?txtsize=33&txt=Book 1&w=250&h=350\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/CoverPhotos/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"CoverPhotos",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"User with id 1 as expected\", function () {",
							"    pm.expect(jsonData.id).to.eql(1);",
							"    pm.expect(jsonData.userName).to.eql(\"User 1\");",
							"    pm.expect(jsonData.password).to.eql(\"Password1\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/Users/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Update successfully\", function () {",
							"    pm.expect(jsonData.id).not.to.eql(null);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"title\": \"string\",\r\n  \"dueDate\": \"2024-08-22T20:04:01.622Z\",\r\n  \"completed\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/Activities/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Activities",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Update successfully\", function () {",
							"    pm.expect(jsonData.id).not.to.eql(null);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"idBook\": 0,\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/Authors/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Authors",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Update successfully\", function () {",
							"    pm.expect(jsonData.id).not.to.eql(null);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"title\": \"string\",\r\n  \"description\": \"string\",\r\n  \"pageCount\": 0,\r\n  \"excerpt\": \"string\",\r\n  \"publishDate\": \"2024-08-22T20:11:08.107Z\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/Books/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Books",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update CoverPhoto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Update successfully\", function () {",
							"    pm.expect(jsonData.id).not.to.eql(null);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"idBook\": 0,\r\n  \"url\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/CoverPhotos/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"CoverPhotos",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Update successfully\", function () {",
							"    pm.expect(jsonData.id).not.to.eql(null);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"userName\": \"string\",\r\n  \"password\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/Users/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete activity response as expected\", function () {",
							"    pm.expect(pm.response.text()).to.eql(\"\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/Activities/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Activities",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete author response as expected\", function () {",
							"    pm.expect(pm.response.text()).to.eql(\"\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/Authors/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Authors",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete book response as expected\", function () {",
							"    pm.expect(pm.response.text()).to.eql(\"\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/Books/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Books",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete CoverPhoto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete cover photo response as expected\", function () {",
							"    pm.expect(pm.response.text()).to.eql(\"\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/CoverPhotos/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"CoverPhotos",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete user response as expected\", function () {",
							"    pm.expect(pm.response.text()).to.eql(\"\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/Users/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"Users",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://hungnd-v2.azurewebsites.net/api/v1/",
			"type": "string"
		}
	]
}